#!/bin/bash

# purpose of this script:
#  Take a given URL, call the URL,
#  and depending on the details of the http-answer return a status to nagios.
#
#  note:
#  - Does not check https certificate.
#  - Measures roundtrip time in seconds (which is quite rough, to be honest).
#  - An acceptable HTTP status code is matched just with: the word OK follows somewhere after HTTP/.

first(){ # first function called
    EXIT=3; ERRORS="" ; NOTES=""; STATS="" # start with these defaults
    options "$@"
    call_url
    analyze_response
    answer_nagios
}

call_url(){ # send http request to fylr
    TIMESTART=`date +%s`
    RESPONSE=`wget "$URL" -t 1 -S -q --no-cache --no-check-certificate -O - 2>&1`
    TIMESTOP=`date +%s`
}

analyze_response(){ # process answer from fylr

    # analyze response duration
    TIME_TAKEN=$(($TIMESTOP-$TIMESTART))
    STATS="${STATS} Roundtrip=$TIME_TAKEN"
    if [ $TIME_TAKEN -lt $WARN_TIMEOUT ] ; then
        EXIT=0; NOTES="$NOTES fylr responded faster than $WARN_TIMEOUT seconds."
    elif [ $TIME_TAKEN -lt $CRIT_TIMEOUT ] ; then
        EXIT=1; ERRORS="$ERRORS fylr responded slower that $WARN_TIMEOUT seconds."
    else
        EXIT=2; ERRORS="$ERRORS fylr did not respond in $CRIT_TIMEOUT seconds."
    fi

    # analyze http-status
    # look on all lines except the paragraph that starts with { and ends with }, each on their own lines.
    HEADERS=`echo "$RESPONSE"|sed '/^[[:space:]]*{[[:space:]]*$/,/^[[:space:]]*}[[:space:]]*$/d'`
    HTTP_STATUS_LINE=`echo "$HEADERS"|grep '^[[:space:]]*HTTP/'`
    HTTP_STATUS_LINE=`echo $HTTP_STATUS_LINE`          # removes line breaks. Line breaks in icinga web UI are cut off in some places and look broken.
    if echo "$HTTP_STATUS_LINE" | grep -qw 'OK'; then
        NOTES="$NOTES STATUS OK: ${HTTP_STATUS_LINE}."
    else
        EXIT=2
        ERRORS="$ERRORS STATUS: ${HTTP_STATUS_LINE}!"
    fi

    # is $SEARCH_STRING in the response?
    if echo "$RESPONSE" | grep -qw "$SEARCH_STRING"; then
        NOTES="$NOTES Found $SEARCH_STRING in answer."
    else
        EXIT=2
        ERRORS="$ERRORS Did not find $SEARCH_STRING in answer!"
    fi
}

options(){ # process command line parameters
    URL="$1"
    [ -z "$URL" ] && ERRORS="URL missing as first argument" EXIT=3 answer_nagios
    shift

    # defaults:
    WARN_TIMEOUT=5
    CRIT_TIMEOUT=30
    SEARCH_STRING=index_names

    while [ "$1" ] ; do
        case "$1" in
        -w)
            WARN_TIMEOUT=$2;shift
        ;;
        -c)
            CRIT_TIMEOUT=$2;shift
        ;;
        -s)
            SEARCH_STRING="$2";shift
        ;;
        *)
            ERRORS="unknown argument '$1'" EXIT=3 answer_nagios
        esac
        shift
    done
}

answer_nagios(){ # follow nagios rules for text syntax and return/exit code/status/value
    case $EXIT in
    0) echo -n "OK-" ;;
    1) echo -n "WARNING-" ;;
    2) echo -n "CRITICAL-" ;;
    3) echo -n "UNKNOWN-" ;;
    esac
    echo "$ERRORS$NOTES"'| '"$STATS"
    exit $EXIT
}

first "$@"
